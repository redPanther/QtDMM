# get version
function(get_version_from_git)
	find_package(Git QUIET)
	if(NOT Git_FOUND)
		message(WARNING "Git not found")
		return()
	endif()

	execute_process(
		COMMAND ${GIT_EXECUTABLE} describe --tags --always
		WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
		OUTPUT_VARIABLE GIT_TAG
		OUTPUT_STRIP_TRAILING_WHITESPACE
		RESULT_VARIABLE GIT_RESULT
	)

	if(NOT GIT_RESULT EQUAL 0)
		message(WARNING "Failed to get git tag")
		return()
	endif()

	execute_process(
		COMMAND ${GIT_EXECUTABLE} rev-parse --short=7 HEAD
		WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
		OUTPUT_VARIABLE GIT_COMMIT_SHORT_HASH
		OUTPUT_STRIP_TRAILING_WHITESPACE
	)

	string(REGEX REPLACE "^v" "" CLEAN_TAG "${GIT_TAG}")
	if(CLEAN_TAG MATCHES "^([0-9]+)\\.([0-9]+)\\.([0-9]+)(-.*)?$")

		set(PROJECT_VERSION_MAJOR ${CMAKE_MATCH_1})
		set(PROJECT_VERSION_MAJOR ${PROJECT_VERSION_MAJOR} PARENT_SCOPE)
		set(PROJECT_VERSION_MINOR ${CMAKE_MATCH_2})
		set(PROJECT_VERSION_MINOR ${PROJECT_VERSION_MINOR} PARENT_SCOPE)
		set(PROJECT_VERSION_PATCH "${CMAKE_MATCH_3}${CMAKE_MATCH_4}+${GIT_COMMIT_SHORT_HASH}")
		set(PROJECT_VERSION_PATCH "${PROJECT_VERSION_PATCH}" PARENT_SCOPE)

		set(FULL_VERSION "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}" )
		set(FULL_VERSION "${FULL_VERSION}" PARENT_SCOPE)
		set(PROJECT_VERSION "${FULL_VERSION}")
		set(PROJECT_VERSION "${FULL_VERSION}" PARENT_SCOPE)
		message( STATUS "QtDMM version: ${FULL_VERSION}" )
	else()
		message(WARNING "Tag '${CLEAN_TAG}' does not match semver format")
	endif()
endfunction()

get_version_from_git()
